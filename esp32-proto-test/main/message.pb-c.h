/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: message.proto */

#ifndef PROTOBUF_C_message_2eproto__INCLUDED
#define PROTOBUF_C_message_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003002 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Test__Message Test__Message;
typedef struct _Test__RepeatedMessage Test__RepeatedMessage;


/* --- enums --- */


/* --- messages --- */

struct  _Test__Message
{
  ProtobufCMessage base;
  int32_t a;
  int32_t b;
  char *test;
};
#define TEST__MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&test__message__descriptor) \
    , 0, 0, (char *)protobuf_c_empty_string }


struct  _Test__RepeatedMessage
{
  ProtobufCMessage base;
  int32_t c;
  size_t n_message;
  Test__Message **message;
};
#define TEST__REPEATED_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&test__repeated_message__descriptor) \
    , 0, 0,NULL }


/* Test__Message methods */
void   test__message__init
                     (Test__Message         *message);
size_t test__message__get_packed_size
                     (const Test__Message   *message);
size_t test__message__pack
                     (const Test__Message   *message,
                      uint8_t             *out);
size_t test__message__pack_to_buffer
                     (const Test__Message   *message,
                      ProtobufCBuffer     *buffer);
Test__Message *
       test__message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   test__message__free_unpacked
                     (Test__Message *message,
                      ProtobufCAllocator *allocator);
/* Test__RepeatedMessage methods */
void   test__repeated_message__init
                     (Test__RepeatedMessage         *message);
size_t test__repeated_message__get_packed_size
                     (const Test__RepeatedMessage   *message);
size_t test__repeated_message__pack
                     (const Test__RepeatedMessage   *message,
                      uint8_t             *out);
size_t test__repeated_message__pack_to_buffer
                     (const Test__RepeatedMessage   *message,
                      ProtobufCBuffer     *buffer);
Test__RepeatedMessage *
       test__repeated_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   test__repeated_message__free_unpacked
                     (Test__RepeatedMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Test__Message_Closure)
                 (const Test__Message *message,
                  void *closure_data);
typedef void (*Test__RepeatedMessage_Closure)
                 (const Test__RepeatedMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor test__message__descriptor;
extern const ProtobufCMessageDescriptor test__repeated_message__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_message_2eproto__INCLUDED */
